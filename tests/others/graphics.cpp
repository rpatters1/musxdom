/*
 * Copyright (C) 2025, Robert Patterson
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#include "gtest/gtest.h"
#include "musx/musx.h"
#include "test_utils.h"

using namespace musx::dom;

TEST(GraphicsFileMetadataTest, PopulateAllFileInfoClasses)
{
    // XML moved internal to the test and renamed `xml`
    constexpr static musxtest::string_view xml = R"xml(
<?xml version="1.0" encoding="UTF-8"?>
<finale>
  <others>
    <fileAlias cmper="1">
      <length>548</length>
      <aliasHandlealiasHandle>
    </fileAlias>
    <fileAlias cmper="2">
      <length>544</length>
      <aliasHandlealiasHandle>
    </fileAlias>
    <fileDesc cmper="1">
      <version>256</version>
      <pathType>macAlias</pathType>
      <pathID>1</pathID>
    </fileDesc>
    <fileDesc cmper="2">
      <version>256</version>
      <pathType>macAlias</pathType>
      <pathID>2</pathID>
    </fileDesc>
    <filePath cmper="1">
      <path>TrapSetKeyText.pdf</path>
    </filePath>
    <filePath cmper="2">
      <path>PercussionKey.pdf</path>
    </filePath>
    <fileURLBookmark cmper="1">
      <length>1644</length>
      <urlBookmarkDataurlBookmarkData>
    </fileURLBookmark>
    <fileURLBookmark cmper="2">
      <length>1640</length>
      <urlBookmarkDataurlBookmarkData>
    </fileURLBookmark>
  </others>
</finale>
)xml";

    auto doc = musx::factory::DocumentFactory::create<musx::xml::tinyxml2::Document>(xml);
    auto others = doc->getOthers();
    ASSERT_TRUE(others);

    // ---------- FileAlias ----------
    {
        auto a1 = others->get<others::FileAlias>(SCORE_PARTID, 1);
        ASSERT_TRUE(a1) << "FileAlias with cmper 1 not found";
        EXPECT_EQ(a1->length, a1->aliasHandle.size());
        EXPECT_EQ(a1->length, static_cast<size_t>(548));
        EXPECT_EQ(a1->aliasHandle[4], 0x24);

        auto a2 = others->get<others::FileAlias>(SCORE_PARTID, 2);
        ASSERT_TRUE(a2) << "FileAlias with cmper 2 not found";
        EXPECT_EQ(a2->length, a2->aliasHandle.size());
        EXPECT_EQ(a2->length, static_cast<size_t>(544));
        EXPECT_EQ(a2->aliasHandle[5], 0x02);
    }

    // ---------- FileDescription ----------
    {
        auto d1 = others->get<others::FileDescription>(SCORE_PARTID, 1);
        ASSERT_TRUE(d1) << "FileDescription with cmper 1 not found";
        EXPECT_EQ(d1->version, static_cast<uint32_t>(256));
        EXPECT_EQ(d1->pathType, others::FileDescription::PathType::MacAlias);
        EXPECT_EQ(d1->pathId, 1);

        auto d2 = others->get<others::FileDescription>(SCORE_PARTID, 2);
        ASSERT_TRUE(d2) << "FileDescription with cmper 2 not found";
        EXPECT_EQ(d2->version, static_cast<uint32_t>(256));
        EXPECT_EQ(d2->pathType, others::FileDescription::PathType::MacAlias);
        EXPECT_EQ(d2->pathId, 2);
    }

    // ---------- FilePath ----------
    {
        auto p1 = others->get<others::FilePath>(SCORE_PARTID, 1);
        ASSERT_TRUE(p1) << "FilePath with cmper 1 not found";
        EXPECT_EQ(p1->path, std::string("TrapSetKeyText.pdf"));

        auto p2 = others->get<others::FilePath>(SCORE_PARTID, 2);
        ASSERT_TRUE(p2) << "FilePath with cmper 2 not found";
        EXPECT_EQ(p2->path, std::string("PercussionKey.pdf"));
    }

    // ---------- FileUrlBookmark ----------
    {
        auto b1 = others->get<others::FileUrlBookmark>(SCORE_PARTID, 1);
        ASSERT_TRUE(b1) << "FileUrlBookmark with cmper 1 not found";
        EXPECT_EQ(b1->length, b1->urlBookmarkData.size());
        EXPECT_EQ(b1->length, static_cast<size_t>(1644));
        EXPECT_EQ(b1->urlBookmarkData[2], 0x6B);

        auto b2 = others->get<others::FileUrlBookmark>(SCORE_PARTID, 2);
        ASSERT_TRUE(b2) << "FileUrlBookmark with cmper 2 not found";
        EXPECT_EQ(b2->length, b2->urlBookmarkData.size());
        EXPECT_EQ(b2->length, static_cast<size_t>(1640));
        EXPECT_EQ(b1->urlBookmarkData[4], 0x06);
    }
}

TEST(PageGraphicAssignTest, PopulateFields)
{
    constexpr static musxtest::string_view xml = R"xml(
<?xml version="1.0" encoding="UTF-8"?>
<finale>
  <others>
    <pageGraphicAssign cmper="4" inci="0">
      <version>256</version>
      <left>13</left>
      <bottom>-956</bottom>
      <width>495</width>
      <height>256</height>
      <fDescID>2</fDescID>
      <displayType>one</displayType>
      <displayHidden/>
      <halign>center</halign>
      <valign>top</valign>
      <posFrom>margins</posFrom>
      <fixedPerc/>
      <startPage>4</startPage>
      <endPage>4</endPage>
      <savedRecord/>
      <origWidth>556</origWidth>
      <origHeight>324</origHeight>
      <rightPgHAlign>right</rightPgHAlign>
      <rightPgVAlign>top</rightPgVAlign>
      <rightPgPosFrom>margins</rightPgPosFrom>
      <rightPgFixedPerc/>
      <rightPgLeft>17</rightPgLeft>
      <rightPgBottom>-956</rightPgBottom>
      <graphicCmper>2</graphicCmper>
    </pageGraphicAssign>
    <pageGraphicAssign cmper="4" inci="0" part="1" shared="true">
      <displayHidden>
        <offInPart/>
      </displayHidden>
    </pageGraphicAssign>
  </others>
</finale>
    )xml";

    auto doc = musx::factory::DocumentFactory::create<musx::xml::rapidxml::Document>(xml);
    auto others = doc->getOthers();
    ASSERT_TRUE(others);

    // Score assignment
    auto g1 = others->get<others::PageGraphicAssign>(SCORE_PARTID, 4, 0);
    ASSERT_TRUE(g1) << "PageGraphicAssign (cmper=4, inci=0) not found for SCORE_PARTID but does exist";

    EXPECT_EQ(g1->version, 256u);
    EXPECT_EQ(g1->left, 13);
    EXPECT_EQ(g1->bottom, -956);
    EXPECT_EQ(g1->width, 495);
    EXPECT_EQ(g1->height, 256);
    EXPECT_EQ(g1->fDescId, 2);
    EXPECT_EQ(g1->displayType, others::PageGraphicAssign::PageAssignType::One);
    EXPECT_TRUE(g1->hidden);
    EXPECT_EQ(g1->hAlign, others::PageGraphicAssign::HorizontalAlignment::Center);
    EXPECT_EQ(g1->vAlign, others::PageGraphicAssign::VerticalAlignment::Top);
    EXPECT_EQ(g1->posFrom, others::PageGraphicAssign::PositionFrom::Margins);
    EXPECT_TRUE(g1->fixedPerc);
    EXPECT_EQ(g1->startPage, 4);
    EXPECT_EQ(g1->endPage, 4);
    EXPECT_TRUE(g1->savedRecord);
    EXPECT_EQ(g1->origWidth, 556);
    EXPECT_EQ(g1->origHeight, 324);
    EXPECT_EQ(g1->rightPgHAlign, others::PageGraphicAssign::HorizontalAlignment::Right);
    EXPECT_EQ(g1->rightPgVAlign, others::PageGraphicAssign::VerticalAlignment::Top);
    EXPECT_EQ(g1->rightPgPosFrom, others::PageGraphicAssign::PositionFrom::Margins);
    EXPECT_TRUE(g1->rightPgFixedPerc);
    EXPECT_EQ(g1->rightPgLeft, 17);
    EXPECT_EQ(g1->rightPgBottom, -956);
    EXPECT_EQ(g1->graphicCmper, 2);

    // Part 1 assignment (shared="true"): inherits from score, overridden fields apply
    auto g2 = others->get<others::PageGraphicAssign>(1, 4, 0);
    ASSERT_TRUE(g2) << "PageGraphicAssign (cmper=4, inci=0) not found for part 1 but does exist";

    // Inherited fields
    EXPECT_EQ(g2->version, g1->version);
    EXPECT_EQ(g2->left, g1->left);
    EXPECT_EQ(g2->bottom, g1->bottom);
    EXPECT_EQ(g2->width, g1->width);
    EXPECT_EQ(g2->height, g1->height);
    EXPECT_EQ(g2->fDescId, g1->fDescId);
    EXPECT_EQ(g2->displayType, g1->displayType);
    EXPECT_EQ(g2->hAlign, g1->hAlign);
    EXPECT_EQ(g2->vAlign, g1->vAlign);
    EXPECT_EQ(g2->posFrom, g1->posFrom);
    EXPECT_EQ(g2->fixedPerc, g1->fixedPerc);
    EXPECT_EQ(g2->startPage, g1->startPage);
    EXPECT_EQ(g2->endPage, g1->endPage);
    EXPECT_EQ(g2->savedRecord, g1->savedRecord);
    EXPECT_EQ(g2->origWidth, g1->origWidth);
    EXPECT_EQ(g2->origHeight, g1->origHeight);
    EXPECT_EQ(g2->rightPgHAlign, g1->rightPgHAlign);
    EXPECT_EQ(g2->rightPgVAlign, g1->rightPgVAlign);
    EXPECT_EQ(g2->rightPgPosFrom, g1->rightPgPosFrom);
    EXPECT_EQ(g2->rightPgFixedPerc, g1->rightPgFixedPerc);
    EXPECT_EQ(g2->rightPgLeft, g1->rightPgLeft);
    EXPECT_EQ(g2->rightPgBottom, g1->rightPgBottom);
    EXPECT_EQ(g2->graphicCmper, g1->graphicCmper);

    // Overridden field
    EXPECT_FALSE(g2->hidden); // displayHidden with <offInPart/> -> false in the part
}

TEST(MeasureGraphicAssignTest, PopulateFields)
{
    constexpr static musxtest::string_view xml = R"xml(
<?xml version="1.0" encoding="UTF-8"?>
<finale>
  <details>
    <measGraphicAssign cmper1="1" cmper2="2" inci="0">
      <version>256</version>
      <left>184</left>
      <bottom>82</bottom>
      <width>121</width>
      <height>16</height>
      <fDescID>1</fDescID>
      <displayType>one</displayType>
      <displayHidden/>
      <savedRecord/>
      <origWidth>133</origWidth>
      <origHeight>18</origHeight>
      <graphicCmper>1</graphicCmper>
    </measGraphicAssign>
  </details>
</finale>
    )xml";

    auto doc = musx::factory::DocumentFactory::create<musx::xml::pugi::Document>(xml);
    ASSERT_TRUE(doc);

    auto details = doc->getDetails();
    ASSERT_TRUE(details);

    auto assign = details->get<details::MeasureGraphicAssign>(SCORE_PARTID, 1, 2, 0);
    ASSERT_TRUE(assign);

    EXPECT_EQ(assign->version, 256u);
    EXPECT_EQ(assign->left, 184);
    EXPECT_EQ(assign->bottom, 82);
    EXPECT_EQ(assign->width, 121);
    EXPECT_EQ(assign->height, 16);
    EXPECT_EQ(assign->fDescId, 1);
    EXPECT_TRUE(assign->hidden);
    EXPECT_TRUE(assign->savedRecord);
    EXPECT_EQ(assign->origWidth, 133);
    EXPECT_EQ(assign->origHeight, 18);
    EXPECT_EQ(assign->graphicCmper, 1);
}

TEST(ShapeGraphicAssignTest, PopulateFields)
{
    constexpr static musxtest::string_view xml = R"xml(
<?xml version="1.0" encoding="UTF-8"?>
<finale>
  <others>
    <shapeGraphicAssign cmper="1" inci="0">
      <version>256</version>
      <left>728</left>
      <bottom>-580</bottom>
      <width>336</width>
      <height>168</height>
      <fDescID>1</fDescID>
      <displayType>one</displayType>
      <halign>left</halign>
      <valign>top</valign>
      <posFrom>paper</posFrom>
      <fixedPerc/>
      <savedRecord/>
      <origWidth>336</origWidth>
      <origHeight>168</origHeight>
      <graphicCmper>1</graphicCmper>
    </shapeGraphicAssign>
  </others>
</finale>
    )xml";

    auto doc = musx::factory::DocumentFactory::create<musx::xml::rapidxml::Document>(xml);
    ASSERT_TRUE(doc);

    auto others = doc->getOthers();
    ASSERT_TRUE(others);

    // Score assignment (partId = SCORE_PARTID)
    auto g = others->get<others::ShapeGraphicAssign>(SCORE_PARTID, 1, 0);
    ASSERT_TRUE(g) << "ShapeGraphicAssign (cmper=1, inci=0) not found for SCORE_PARTID but does exist";

    EXPECT_EQ(g->version, 256u);
    EXPECT_EQ(g->left, 728);
    EXPECT_EQ(g->bottom, -580);
    EXPECT_EQ(g->width, 336);
    EXPECT_EQ(g->height, 168);
    EXPECT_EQ(g->fDescId, 1);

    // Invariants displayType/posFrom are intentionally not modeled on the class.
    // We still verify alignment & flags populated as expected.
    EXPECT_EQ(g->hAlign, others::ShapeGraphicAssign::HorizontalAlignment::Left);
    EXPECT_EQ(g->vAlign, others::ShapeGraphicAssign::VerticalAlignment::Top);

    // Boolean-presence nodes
    EXPECT_TRUE(g->fixedPerc);
    EXPECT_TRUE(g->savedRecord);

    // Not present in XML -> default false
    EXPECT_FALSE(g->hidden);

    EXPECT_EQ(g->origWidth, 336);
    EXPECT_EQ(g->origHeight, 168);
    EXPECT_EQ(g->graphicCmper, 1);
}
